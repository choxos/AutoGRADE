# Generated by Django 4.2.8 on 2025-08-16 12:12

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="GRADEProject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=500)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "population",
                    models.TextField(help_text="Target population description"),
                ),
                (
                    "intervention",
                    models.TextField(help_text="Intervention being assessed"),
                ),
                ("comparison", models.TextField(help_text="Comparator/control")),
                (
                    "manuscript_file",
                    models.FileField(blank=True, null=True, upload_to="manuscripts/"),
                ),
                (
                    "manuscript_text",
                    models.TextField(
                        blank=True, help_text="Extracted text from manuscript"
                    ),
                ),
                (
                    "ai_extracted_pico",
                    models.JSONField(
                        blank=True, help_text="AI-extracted PICO elements", null=True
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Outcome",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=300)),
                ("description", models.TextField(blank=True)),
                (
                    "outcome_type",
                    models.CharField(
                        choices=[
                            ("beneficial", "Beneficial"),
                            ("harmful", "Harmful"),
                            ("burden", "Burden/Cost"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "importance",
                    models.IntegerField(
                        choices=[
                            (1, "Not Important (1-3)"),
                            (2, "Not Important (1-3)"),
                            (3, "Not Important (1-3)"),
                            (4, "Important (4-6)"),
                            (5, "Important (4-6)"),
                            (6, "Important (4-6)"),
                            (7, "Critical (7-9)"),
                            (8, "Critical (7-9)"),
                            (9, "Critical (7-9)"),
                        ],
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(9),
                        ],
                    ),
                ),
                (
                    "measurement_scale",
                    models.CharField(
                        blank=True,
                        help_text="e.g., Visual Analog Scale, mortality",
                        max_length=200,
                    ),
                ),
                (
                    "time_frame",
                    models.CharField(help_text="Duration of follow-up", max_length=200),
                ),
                (
                    "minimal_important_difference",
                    models.FloatField(blank=True, help_text="MID threshold", null=True),
                ),
                (
                    "relative_effect",
                    models.FloatField(blank=True, help_text="RR, OR, HR", null=True),
                ),
                (
                    "relative_effect_type",
                    models.CharField(
                        blank=True, help_text="RR, OR, HR, MD, SMD", max_length=20
                    ),
                ),
                ("confidence_interval_lower", models.FloatField(blank=True, null=True)),
                ("confidence_interval_upper", models.FloatField(blank=True, null=True)),
                (
                    "baseline_risk",
                    models.FloatField(
                        blank=True, help_text="Control group event rate", null=True
                    ),
                ),
                (
                    "intervention_risk",
                    models.FloatField(
                        blank=True, help_text="Intervention group event rate", null=True
                    ),
                ),
                ("risk_difference", models.FloatField(blank=True, null=True)),
                ("risk_difference_ci_lower", models.FloatField(blank=True, null=True)),
                ("risk_difference_ci_upper", models.FloatField(blank=True, null=True)),
                ("number_of_studies", models.IntegerField(blank=True, null=True)),
                ("total_participants", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outcomes",
                        to="grade.gradeproject",
                    ),
                ),
            ],
            options={
                "ordering": ["-importance", "name"],
            },
        ),
        migrations.CreateModel(
            name="SummaryOfFindingsTable",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=500)),
                ("population", models.TextField()),
                ("intervention", models.TextField()),
                ("comparison", models.TextField()),
                ("setting", models.CharField(blank=True, max_length=200)),
                (
                    "bibliography",
                    models.TextField(
                        blank=True, help_text="Citation for the systematic review"
                    ),
                ),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                ("ai_generation_data", models.JSONField(blank=True, null=True)),
                (
                    "generated_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sof_table",
                        to="grade.gradeproject",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Study",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=500)),
                ("authors", models.CharField(blank=True, max_length=500)),
                ("year", models.IntegerField(blank=True, null=True)),
                ("journal", models.CharField(blank=True, max_length=200)),
                (
                    "study_type",
                    models.CharField(
                        choices=[
                            ("rct", "Randomized Controlled Trial"),
                            ("cohort", "Cohort Study"),
                            ("case_control", "Case-Control Study"),
                            ("case_series", "Case Series"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("total_participants", models.IntegerField(blank=True, null=True)),
                (
                    "intervention_participants",
                    models.IntegerField(blank=True, null=True),
                ),
                ("control_participants", models.IntegerField(blank=True, null=True)),
                ("population_description", models.TextField(blank=True)),
                ("intervention_description", models.TextField(blank=True)),
                ("control_description", models.TextField(blank=True)),
                ("follow_up_duration", models.CharField(blank=True, max_length=100)),
                ("funding_source", models.CharField(blank=True, max_length=200)),
                ("industry_funded", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="studies",
                        to="grade.gradeproject",
                    ),
                ),
            ],
            options={
                "ordering": ["year", "authors"],
            },
        ),
        migrations.CreateModel(
            name="PlainLanguageStatement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "statement",
                    models.TextField(help_text="Plain language summary of the finding"),
                ),
                (
                    "certainty_description",
                    models.CharField(
                        help_text="e.g., 'likely', 'may', 'probably'", max_length=100
                    ),
                ),
                ("generated_by_ai", models.BooleanField(default=False)),
                ("ai_generation_data", models.JSONField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "outcome",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plain_language",
                        to="grade.outcome",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GRADEAssessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "starting_certainty",
                    models.CharField(
                        choices=[
                            ("very_low", "Very Low"),
                            ("low", "Low"),
                            ("moderate", "Moderate"),
                            ("high", "High"),
                        ],
                        default="high",
                        max_length=20,
                    ),
                ),
                (
                    "risk_of_bias",
                    models.CharField(
                        choices=[
                            ("not_serious", "Not Serious"),
                            ("serious", "Serious"),
                            ("very_serious", "Very Serious"),
                            ("extremely_serious", "Extremely Serious"),
                        ],
                        default="not_serious",
                        max_length=20,
                    ),
                ),
                ("risk_of_bias_rationale", models.TextField(blank=True)),
                (
                    "risk_of_bias_rating_down",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(2),
                        ],
                    ),
                ),
                (
                    "inconsistency",
                    models.CharField(
                        choices=[
                            ("not_serious", "Not Serious"),
                            ("serious", "Serious"),
                            ("very_serious", "Very Serious"),
                            ("extremely_serious", "Extremely Serious"),
                        ],
                        default="not_serious",
                        max_length=20,
                    ),
                ),
                ("inconsistency_rationale", models.TextField(blank=True)),
                (
                    "inconsistency_rating_down",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(2),
                        ],
                    ),
                ),
                (
                    "indirectness",
                    models.CharField(
                        choices=[
                            ("not_serious", "Not Serious"),
                            ("serious", "Serious"),
                            ("very_serious", "Very Serious"),
                            ("extremely_serious", "Extremely Serious"),
                        ],
                        default="not_serious",
                        max_length=20,
                    ),
                ),
                ("indirectness_rationale", models.TextField(blank=True)),
                (
                    "indirectness_rating_down",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(2),
                        ],
                    ),
                ),
                (
                    "imprecision",
                    models.CharField(
                        choices=[
                            ("not_serious", "Not Serious"),
                            ("serious", "Serious"),
                            ("very_serious", "Very Serious"),
                            ("extremely_serious", "Extremely Serious"),
                        ],
                        default="not_serious",
                        max_length=20,
                    ),
                ),
                ("imprecision_rationale", models.TextField(blank=True)),
                (
                    "imprecision_rating_down",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(2),
                        ],
                    ),
                ),
                (
                    "publication_bias",
                    models.CharField(
                        choices=[
                            ("not_serious", "Not Serious"),
                            ("serious", "Serious"),
                            ("very_serious", "Very Serious"),
                            ("extremely_serious", "Extremely Serious"),
                        ],
                        default="not_serious",
                        max_length=20,
                    ),
                ),
                ("publication_bias_rationale", models.TextField(blank=True)),
                (
                    "publication_bias_rating_down",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(2),
                        ],
                    ),
                ),
                ("large_effect", models.BooleanField(default=False)),
                ("large_effect_rationale", models.TextField(blank=True)),
                (
                    "large_effect_rating_up",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(2),
                        ],
                    ),
                ),
                ("dose_response", models.BooleanField(default=False)),
                ("dose_response_rationale", models.TextField(blank=True)),
                (
                    "dose_response_rating_up",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "final_certainty",
                    models.CharField(
                        choices=[
                            ("very_low", "Very Low"),
                            ("low", "Low"),
                            ("moderate", "Moderate"),
                            ("high", "High"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "ai_assessment_data",
                    models.JSONField(
                        blank=True, help_text="Raw AI assessment data", null=True
                    ),
                ),
                ("assessed_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assessed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "outcome",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="grade_assessment",
                        to="grade.outcome",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AIAnalysisSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("session_type", models.CharField(max_length=50)),
                ("input_data", models.JSONField()),
                ("ai_response", models.JSONField()),
                ("processing_time", models.FloatField(blank=True, null=True)),
                ("error_occurred", models.BooleanField(default=False)),
                ("error_message", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_sessions",
                        to="grade.gradeproject",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
    ]
